const std = @import("std");

const Self = @This();

code: Alpha3Code,

pub fn init(country_code: Alpha3Code) Self {
    return Self{ .code = country_code };
}

pub const Alpha3Code = enum(u16) {
    abw,
    afg,
    ago,
    aia,
    ala,
    alb,
    @"and",
    are,
    arg,
    arm,
    @"asm",
    ata,
    atf,
    atg,
    aus,
    aut,
    aze,
    bdi,
    bel,
    ben,
    bes,
    bfa,
    bgd,
    bgr,
    bhr,
    bhs,
    bih,
    blm,
    blr,
    blz,
    bmu,
    bol,
    bra,
    brb,
    brn,
    btn,
    bvt,
    bwa,
    caf,
    can,
    cck,
    che,
    chl,
    chn,
    civ,
    cmr,
    cod,
    cog,
    cok,
    col,
    com,
    cpv,
    cri,
    cub,
    cuw,
    cxr,
    cym,
    cyp,
    cze,
    deu,
    dji,
    dma,
    dnk,
    dom,
    dza,
    ecu,
    egy,
    eri,
    esh,
    esp,
    est,
    eth,
    fin,
    fji,
    flk,
    fra,
    fro,
    fsm,
    gab,
    gbr,
    geo,
    ggy,
    gha,
    gib,
    gin,
    glp,
    gmb,
    gnb,
    gnq,
    grc,
    grd,
    grl,
    gtm,
    guf,
    gum,
    guy,
    hkg,
    hmd,
    hnd,
    hrv,
    hti,
    hun,
    idn,
    imn,
    ind,
    iot,
    irl,
    irn,
    irq,
    isl,
    isr,
    ita,
    jam,
    jey,
    jor,
    jpn,
    kaz,
    ken,
    kgz,
    khm,
    kir,
    kna,
    kor,
    kwt,
    lao,
    lbn,
    lbr,
    lby,
    lca,
    lie,
    lka,
    lso,
    ltu,
    lux,
    lva,
    mac,
    maf,
    mar,
    mco,
    mda,
    mdg,
    mdv,
    mex,
    mhl,
    mkd,
    mli,
    mlt,
    mmr,
    mne,
    mng,
    mnp,
    moz,
    mrt,
    msr,
    mtq,
    mus,
    mwi,
    mys,
    myt,
    nam,
    ncl,
    ner,
    nfk,
    nga,
    nic,
    niu,
    nld,
    nor,
    npl,
    nru,
    nzl,
    omn,
    pak,
    pan,
    pcn,
    per,
    phl,
    plw,
    png,
    pol,
    pri,
    prk,
    prt,
    pry,
    pse,
    pyf,
    qat,
    reu,
    rou,
    rus,
    rwa,
    sau,
    sdn,
    sen,
    sgp,
    sgs,
    shn,
    sjm,
    slb,
    sle,
    slv,
    smr,
    som,
    spm,
    srb,
    ssd,
    stp,
    sur,
    svk,
    svn,
    swe,
    swz,
    sxm,
    syc,
    syr,
    tca,
    tcd,
    tgo,
    tha,
    tjk,
    tkl,
    tkm,
    tls,
    ton,
    tto,
    tun,
    tur,
    tuv,
    twn,
    tza,
    uga,
    ukr,
    umi,
    ury,
    usa,
    uzb,
    vat,
    vct,
    ven,
    vgb,
    vir,
    vnm,
    vut,
    wlf,
    wsm,
    yem,
    zaf,
    zmb,
    zwe,

    pub fn alpha3CodeString(self: Alpha3Code) [3]u8 {
        var code: [3]u8 = undefined;
        _ = std.ascii.upperString(&code, @tagName(self));
        return code;
    }

    pub fn alpha2CodeString(self: Alpha3Code) [2]u8 {
        var code: [2]u8 = undefined;
        _ = std.ascii.upperString(&code, @tagName(@as(Alpha2Code, @enumFromInt(@intFromEnum(self)))));
        return code;
    }

    pub fn numericString(self: Alpha3Code) [3]u8 {
        const str = switch (self) {
            .abw => "533",
            .afg => "004",
            .ago => "024",
            .aia => "660",
            .ala => "248",
            .alb => "008",
            .@"and" => "020",
            .are => "784",
            .arg => "032",
            .arm => "051",
            .@"asm" => "016",
            .ata => "010",
            .atf => "260",
            .atg => "028",
            .aus => "036",
            .aut => "040",
            .aze => "031",
            .bdi => "108",
            .bel => "056",
            .ben => "204",
            .bes => "535",
            .bfa => "854",
            .bgd => "050",
            .bgr => "100",
            .bhr => "048",
            .bhs => "044",
            .bih => "070",
            .blm => "652",
            .blr => "112",
            .blz => "084",
            .bmu => "060",
            .bol => "068",
            .bra => "076",
            .brb => "052",
            .brn => "096",
            .btn => "064",
            .bvt => "074",
            .bwa => "072",
            .caf => "140",
            .can => "124",
            .cck => "166",
            .che => "756",
            .chl => "152",
            .chn => "156",
            .civ => "384",
            .cmr => "120",
            .cod => "180",
            .cog => "178",
            .cok => "184",
            .col => "170",
            .com => "174",
            .cpv => "132",
            .cri => "188",
            .cub => "192",
            .cuw => "531",
            .cxr => "162",
            .cym => "136",
            .cyp => "196",
            .cze => "203",
            .deu => "276",
            .dji => "262",
            .dma => "212",
            .dnk => "208",
            .dom => "214",
            .dza => "012",
            .ecu => "218",
            .egy => "818",
            .eri => "232",
            .esh => "732",
            .esp => "724",
            .est => "233",
            .eth => "231",
            .fin => "246",
            .fji => "242",
            .flk => "238",
            .fra => "250",
            .fro => "234",
            .fsm => "583",
            .gab => "266",
            .gbr => "826",
            .geo => "268",
            .ggy => "831",
            .gha => "288",
            .gib => "292",
            .gin => "324",
            .glp => "312",
            .gmb => "270",
            .gnb => "624",
            .gnq => "226",
            .grc => "300",
            .grd => "308",
            .grl => "304",
            .gtm => "320",
            .guf => "254",
            .gum => "316",
            .guy => "328",
            .hkg => "344",
            .hmd => "334",
            .hnd => "340",
            .hrv => "191",
            .hti => "332",
            .hun => "348",
            .idn => "360",
            .imn => "833",
            .ind => "356",
            .iot => "086",
            .irl => "372",
            .irn => "364",
            .irq => "368",
            .isl => "352",
            .isr => "376",
            .ita => "380",
            .jam => "388",
            .jey => "832",
            .jor => "400",
            .jpn => "392",
            .kaz => "398",
            .ken => "404",
            .kgz => "417",
            .khm => "116",
            .kir => "296",
            .kna => "659",
            .kor => "410",
            .kwt => "414",
            .lao => "418",
            .lbn => "422",
            .lbr => "430",
            .lby => "434",
            .lca => "662",
            .lie => "438",
            .lka => "144",
            .lso => "426",
            .ltu => "440",
            .lux => "442",
            .lva => "428",
            .mac => "446",
            .maf => "663",
            .mar => "504",
            .mco => "492",
            .mda => "498",
            .mdg => "450",
            .mdv => "462",
            .mex => "484",
            .mhl => "584",
            .mkd => "807",
            .mli => "466",
            .mlt => "470",
            .mmr => "104",
            .mne => "499",
            .mng => "496",
            .mnp => "580",
            .moz => "508",
            .mrt => "478",
            .msr => "500",
            .mtq => "474",
            .mus => "480",
            .mwi => "454",
            .mys => "458",
            .myt => "175",
            .nam => "516",
            .ncl => "540",
            .ner => "562",
            .nfk => "574",
            .nga => "566",
            .nic => "558",
            .niu => "570",
            .nld => "528",
            .nor => "578",
            .npl => "524",
            .nru => "520",
            .nzl => "554",
            .omn => "512",
            .pak => "586",
            .pan => "591",
            .pcn => "612",
            .per => "604",
            .phl => "608",
            .plw => "585",
            .png => "598",
            .pol => "616",
            .pri => "630",
            .prk => "408",
            .prt => "620",
            .pry => "600",
            .pse => "275",
            .pyf => "258",
            .qat => "634",
            .reu => "638",
            .rou => "642",
            .rus => "643",
            .rwa => "646",
            .sau => "682",
            .sdn => "729",
            .sen => "686",
            .sgp => "702",
            .sgs => "239",
            .shn => "654",
            .sjm => "744",
            .slb => "090",
            .sle => "694",
            .slv => "222",
            .smr => "674",
            .som => "706",
            .spm => "666",
            .srb => "688",
            .ssd => "728",
            .stp => "678",
            .sur => "740",
            .svk => "703",
            .svn => "705",
            .swe => "752",
            .swz => "748",
            .sxm => "534",
            .syc => "690",
            .syr => "760",
            .tca => "796",
            .tcd => "148",
            .tgo => "768",
            .tha => "764",
            .tjk => "762",
            .tkl => "772",
            .tkm => "795",
            .tls => "626",
            .ton => "776",
            .tto => "780",
            .tun => "788",
            .tur => "792",
            .tuv => "798",
            .twn => "158",
            .tza => "834",
            .uga => "800",
            .ukr => "804",
            .umi => "581",
            .ury => "858",
            .usa => "840",
            .uzb => "860",
            .vat => "336",
            .vct => "670",
            .ven => "862",
            .vgb => "092",
            .vir => "850",
            .vnm => "704",
            .vut => "548",
            .wlf => "876",
            .wsm => "882",
            .yem => "887",
            .zaf => "710",
            .zmb => "894",
            .zwe => "716",
        };
        return [3]u8{ str[0], str[1], str[2] };
    }

    pub fn numericInteger(self: Alpha3Code) u10 {
        return std.fmt.parseInt(u10, &Alpha3Code.numericString(self), 10) catch {
            @panic("Failed to parse the alpha 3 numeric string.");
        };
    }

    pub fn nameShortUtf8(self: Alpha3Code) []const u8 {
        return switch (self) {
            .abw => "Aruba",
            .afg => "Afghanistan",
            .ago => "Angola",
            .aia => "Anguilla",
            .ala => "Åland Islands",
            .alb => "Albania",
            .@"and" => "Andorra",
            .are => "United Arab Emirates (the)",
            .arg => "Argentina",
            .arm => "Armenia",
            .@"asm" => "American Samoa",
            .ata => "Antarctica",
            .atf => "French Southern Territories (the)",
            .atg => "Antigua and Barbuda",
            .aus => "Australia",
            .aut => "Austria",
            .aze => "Azerbaijan",
            .bdi => "Burundi",
            .bel => "Belgium",
            .ben => "Benin",
            .bes => "Bonaire, Sint Eustatius and Saba",
            .bfa => "Burkina Faso",
            .bgd => "Bangladesh",
            .bgr => "Bulgaria",
            .bhr => "Bahrain",
            .bhs => "Bahamas (the)",
            .bih => "Bosnia and Herzegovina",
            .blm => "Saint Barthélemy",
            .blr => "Belarus",
            .blz => "Belize",
            .bmu => "Bermuda",
            .bol => "Bolivia (Plurinational State of)",
            .bra => "Brazil",
            .brb => "Barbados",
            .brn => "Brunei Darussalam",
            .btn => "Bhutan",
            .bvt => "Bouvet Island",
            .bwa => "Botswana",
            .caf => "Central African Republic (the)",
            .can => "Canada",
            .cck => "Cocos (Keeling) Islands (the)",
            .che => "Switzerland",
            .chl => "Chile",
            .chn => "China",
            .civ => "Côte d'Ivoire",
            .cmr => "Cameroon",
            .cod => "Congo (the Democratic Republic of the)",
            .cog => "Congo (the)",
            .cok => "Cook Islands (the)",
            .col => "Colombia",
            .com => "Comoros (the)",
            .cpv => "Cabo Verde",
            .cri => "Costa Rica",
            .cub => "Cuba",
            .cuw => "Curaçao",
            .cxr => "Christmas Island",
            .cym => "Cayman Islands (the)",
            .cyp => "Cyprus",
            .cze => "Czechia",
            .deu => "Germany",
            .dji => "Djibouti",
            .dma => "Dominica",
            .dnk => "Denmark",
            .dom => "Dominican Republic (the)",
            .dza => "Algeria",
            .ecu => "Ecuador",
            .egy => "Egypt",
            .eri => "Eritrea",
            .esh => "Western Sahara",
            .esp => "Spain",
            .est => "Estonia",
            .eth => "Ethiopia",
            .fin => "Finland",
            .fji => "Fiji",
            .flk => "Falkland Islands (the) [Malvinas]",
            .fra => "France",
            .fro => "Faroe Islands (the)",
            .fsm => "Micronesia (Federated States of)",
            .gab => "Gabon",
            .gbr => "United Kingdom of Great Britain and Northern Ireland (the)",
            .geo => "Georgia",
            .ggy => "Guernsey",
            .gha => "Ghana",
            .gib => "Gibraltar",
            .gin => "Guinea",
            .glp => "Guadeloupe",
            .gmb => "Gambia (the)",
            .gnb => "Guinea-Bissau",
            .gnq => "Equatorial Guinea",
            .grc => "Greece",
            .grd => "Grenada",
            .grl => "Greenland",
            .gtm => "Guatemala",
            .guf => "French Guiana",
            .gum => "Guam",
            .guy => "Guyana",
            .hkg => "Hong Kong",
            .hmd => "Heard Island and McDonald Islands",
            .hnd => "Honduras",
            .hrv => "Croatia",
            .hti => "Haiti",
            .hun => "Hungary",
            .idn => "Indonesia",
            .imn => "Isle of Man",
            .ind => "India",
            .iot => "British Indian Ocean Territory (the)",
            .irl => "Ireland",
            .irn => "Iran (Islamic Republic of)",
            .irq => "Iraq",
            .isl => "Iceland",
            .isr => "Israel",
            .ita => "Italy",
            .jam => "Jamaica",
            .jey => "Jersey",
            .jor => "Jordan",
            .jpn => "Japan",
            .kaz => "Kazakhstan",
            .ken => "Kenya",
            .kgz => "Kyrgyzstan",
            .khm => "Cambodia",
            .kir => "Kiribati",
            .kna => "Saint Kitts and Nevis",
            .kor => "Korea (the Republic of)",
            .kwt => "Kuwait",
            .lao => "Lao People's Democratic Republic (the)",
            .lbn => "Lebanon",
            .lbr => "Liberia",
            .lby => "Libya",
            .lca => "Saint Lucia",
            .lie => "Liechtenstein",
            .lka => "Sri Lanka",
            .lso => "Lesotho",
            .ltu => "Lithuania",
            .lux => "Luxembourg",
            .lva => "Latvia",
            .mac => "Macao",
            .maf => "Saint Martin (French part)",
            .mar => "Morocco",
            .mco => "Monaco",
            .mda => "Moldova (the Republic of)",
            .mdg => "Madagascar",
            .mdv => "Maldives",
            .mex => "Mexico",
            .mhl => "Marshall Islands (the)",
            .mkd => "North Macedonia",
            .mli => "Mali",
            .mlt => "Malta",
            .mmr => "Myanmar",
            .mne => "Montenegro",
            .mng => "Mongolia",
            .mnp => "Northern Mariana Islands (the)",
            .moz => "Mozambique",
            .mrt => "Mauritania",
            .msr => "Montserrat",
            .mtq => "Martinique",
            .mus => "Mauritius",
            .mwi => "Malawi",
            .mys => "Malaysia",
            .myt => "Mayotte",
            .nam => "Namibia",
            .ncl => "New Caledonia",
            .ner => "Niger (the)",
            .nfk => "Norfolk Island",
            .nga => "Nigeria",
            .nic => "Nicaragua",
            .niu => "Niue",
            .nld => "Netherlands (Kingdom of the)",
            .nor => "Norway",
            .npl => "Nepal",
            .nru => "Nauru",
            .nzl => "New Zealand",
            .omn => "Oman",
            .pak => "Pakistan",
            .pan => "Panama",
            .pcn => "Pitcairn",
            .per => "Peru",
            .phl => "Philippines (the)",
            .plw => "Palau",
            .png => "Papua New Guinea",
            .pol => "Poland",
            .pri => "Puerto Rico",
            .prk => "Korea (the Democratic People's Republic of)",
            .prt => "Portugal",
            .pry => "Paraguay",
            .pse => "Palestine, State of",
            .pyf => "French Polynesia",
            .qat => "Qatar",
            .reu => "Réunion",
            .rou => "Romania",
            .rus => "Russian Federation (the)",
            .rwa => "Rwanda",
            .sau => "Saudi Arabia",
            .sdn => "Sudan (the)",
            .sen => "Senegal",
            .sgp => "Singapore",
            .sgs => "South Georgia and the South Sandwich Islands",
            .shn => "Saint Helena, Ascension and Tristan da Cunha",
            .sjm => "Svalbard and Jan Mayen",
            .slb => "Solomon Islands",
            .sle => "Sierra Leone",
            .slv => "El Salvador",
            .smr => "San Marino",
            .som => "Somalia",
            .spm => "Saint Pierre and Miquelon",
            .srb => "Serbia",
            .ssd => "South Sudan",
            .stp => "Sao Tome and Principe",
            .sur => "Suriname",
            .svk => "Slovakia",
            .svn => "Slovenia",
            .swe => "Sweden",
            .swz => "Eswatini",
            .sxm => "Sint Maarten (Dutch part)",
            .syc => "Seychelles",
            .syr => "Syrian Arab Republic (the)",
            .tca => "Turks and Caicos Islands (the)",
            .tcd => "Chad",
            .tgo => "Togo",
            .tha => "Thailand",
            .tjk => "Tajikistan",
            .tkl => "Tokelau",
            .tkm => "Turkmenistan",
            .tls => "Timor-Leste",
            .ton => "Tonga",
            .tto => "Trinidad and Tobago",
            .tun => "Tunisia",
            .tur => "Türkiye",
            .tuv => "Tuvalu",
            .twn => "Taiwan (Province of China)",
            .tza => "Tanzania, the United Republic of",
            .uga => "Uganda",
            .ukr => "Ukraine",
            .umi => "United States Minor Outlying Islands (the)",
            .ury => "Uruguay",
            .usa => "United States of America (the)",
            .uzb => "Uzbekistan",
            .vat => "Holy See (the)",
            .vct => "Saint Vincent and the Grenadines",
            .ven => "Venezuela (Bolivarian Republic of)",
            .vgb => "Virgin Islands (British)",
            .vir => "Virgin Islands (U.S.)",
            .vnm => "Viet Nam",
            .vut => "Vanuatu",
            .wlf => "Wallis and Futuna",
            .wsm => "Samoa",
            .yem => "Yemen",
            .zaf => "South Africa",
            .zmb => "Zambia",
            .zwe => "Zimbabwe",
        };
    }

    pub fn nameShortAscii(self: Alpha3Code) []const u8 {
        return switch (self) {
            .ala => "Aland Islands",
            .blm => "Saint Barthelemy",
            .civ => "Cote d'Ivoire",
            .cuw => "Curacao",
            .tur => "Turkiye",
            else => nameShortUtf8(self),
        };
    }
};

pub const Alpha2Code = enum(@TypeOf(@intFromEnum(Alpha3Code.@"and"))) {
    aw = @intFromEnum(Alpha3Code.abw),
    af = @intFromEnum(Alpha3Code.afg),
    ao = @intFromEnum(Alpha3Code.ago),
    ai = @intFromEnum(Alpha3Code.aia),
    ax = @intFromEnum(Alpha3Code.ala),
    al = @intFromEnum(Alpha3Code.alb),
    ad = @intFromEnum(Alpha3Code.@"and"),
    ae = @intFromEnum(Alpha3Code.are),
    ar = @intFromEnum(Alpha3Code.arg),
    am = @intFromEnum(Alpha3Code.arm),
    as = @intFromEnum(Alpha3Code.@"asm"),
    aq = @intFromEnum(Alpha3Code.ata),
    tf = @intFromEnum(Alpha3Code.atf),
    ag = @intFromEnum(Alpha3Code.atg),
    au = @intFromEnum(Alpha3Code.aus),
    at = @intFromEnum(Alpha3Code.aut),
    az = @intFromEnum(Alpha3Code.aze),
    bi = @intFromEnum(Alpha3Code.bdi),
    be = @intFromEnum(Alpha3Code.bel),
    bj = @intFromEnum(Alpha3Code.ben),
    bq = @intFromEnum(Alpha3Code.bes),
    bf = @intFromEnum(Alpha3Code.bfa),
    bd = @intFromEnum(Alpha3Code.bgd),
    bg = @intFromEnum(Alpha3Code.bgr),
    bh = @intFromEnum(Alpha3Code.bhr),
    bs = @intFromEnum(Alpha3Code.bhs),
    ba = @intFromEnum(Alpha3Code.bih),
    bl = @intFromEnum(Alpha3Code.blm),
    by = @intFromEnum(Alpha3Code.blr),
    bz = @intFromEnum(Alpha3Code.blz),
    bm = @intFromEnum(Alpha3Code.bmu),
    bo = @intFromEnum(Alpha3Code.bol),
    br = @intFromEnum(Alpha3Code.bra),
    bb = @intFromEnum(Alpha3Code.brb),
    bn = @intFromEnum(Alpha3Code.brn),
    bt = @intFromEnum(Alpha3Code.btn),
    bv = @intFromEnum(Alpha3Code.bvt),
    bw = @intFromEnum(Alpha3Code.bwa),
    cf = @intFromEnum(Alpha3Code.caf),
    ca = @intFromEnum(Alpha3Code.can),
    cc = @intFromEnum(Alpha3Code.cck),
    ch = @intFromEnum(Alpha3Code.che),
    cl = @intFromEnum(Alpha3Code.chl),
    cn = @intFromEnum(Alpha3Code.chn),
    ci = @intFromEnum(Alpha3Code.civ),
    cm = @intFromEnum(Alpha3Code.cmr),
    cd = @intFromEnum(Alpha3Code.cod),
    cg = @intFromEnum(Alpha3Code.cog),
    ck = @intFromEnum(Alpha3Code.cok),
    co = @intFromEnum(Alpha3Code.col),
    km = @intFromEnum(Alpha3Code.com),
    cv = @intFromEnum(Alpha3Code.cpv),
    cr = @intFromEnum(Alpha3Code.cri),
    cu = @intFromEnum(Alpha3Code.cub),
    cw = @intFromEnum(Alpha3Code.cuw),
    cx = @intFromEnum(Alpha3Code.cxr),
    ky = @intFromEnum(Alpha3Code.cym),
    cy = @intFromEnum(Alpha3Code.cyp),
    cz = @intFromEnum(Alpha3Code.cze),
    de = @intFromEnum(Alpha3Code.deu),
    dj = @intFromEnum(Alpha3Code.dji),
    dm = @intFromEnum(Alpha3Code.dma),
    dk = @intFromEnum(Alpha3Code.dnk),
    do = @intFromEnum(Alpha3Code.dom),
    dz = @intFromEnum(Alpha3Code.dza),
    ec = @intFromEnum(Alpha3Code.ecu),
    eg = @intFromEnum(Alpha3Code.egy),
    er = @intFromEnum(Alpha3Code.eri),
    eh = @intFromEnum(Alpha3Code.esh),
    es = @intFromEnum(Alpha3Code.esp),
    ee = @intFromEnum(Alpha3Code.est),
    et = @intFromEnum(Alpha3Code.eth),
    fi = @intFromEnum(Alpha3Code.fin),
    fj = @intFromEnum(Alpha3Code.fji),
    fk = @intFromEnum(Alpha3Code.flk),
    fr = @intFromEnum(Alpha3Code.fra),
    fo = @intFromEnum(Alpha3Code.fro),
    fm = @intFromEnum(Alpha3Code.fsm),
    ga = @intFromEnum(Alpha3Code.gab),
    gb = @intFromEnum(Alpha3Code.gbr),
    ge = @intFromEnum(Alpha3Code.geo),
    gg = @intFromEnum(Alpha3Code.ggy),
    gh = @intFromEnum(Alpha3Code.gha),
    gi = @intFromEnum(Alpha3Code.gib),
    gn = @intFromEnum(Alpha3Code.gin),
    gp = @intFromEnum(Alpha3Code.glp),
    gm = @intFromEnum(Alpha3Code.gmb),
    gw = @intFromEnum(Alpha3Code.gnb),
    gq = @intFromEnum(Alpha3Code.gnq),
    gr = @intFromEnum(Alpha3Code.grc),
    gd = @intFromEnum(Alpha3Code.grd),
    gl = @intFromEnum(Alpha3Code.grl),
    gt = @intFromEnum(Alpha3Code.gtm),
    gf = @intFromEnum(Alpha3Code.guf),
    gu = @intFromEnum(Alpha3Code.gum),
    gy = @intFromEnum(Alpha3Code.guy),
    hk = @intFromEnum(Alpha3Code.hkg),
    hm = @intFromEnum(Alpha3Code.hmd),
    hn = @intFromEnum(Alpha3Code.hnd),
    hr = @intFromEnum(Alpha3Code.hrv),
    ht = @intFromEnum(Alpha3Code.hti),
    hu = @intFromEnum(Alpha3Code.hun),
    id = @intFromEnum(Alpha3Code.idn),
    im = @intFromEnum(Alpha3Code.imn),
    in = @intFromEnum(Alpha3Code.ind),
    io = @intFromEnum(Alpha3Code.iot),
    ie = @intFromEnum(Alpha3Code.irl),
    ir = @intFromEnum(Alpha3Code.irn),
    iq = @intFromEnum(Alpha3Code.irq),
    is = @intFromEnum(Alpha3Code.isl),
    il = @intFromEnum(Alpha3Code.isr),
    it = @intFromEnum(Alpha3Code.ita),
    jm = @intFromEnum(Alpha3Code.jam),
    je = @intFromEnum(Alpha3Code.jey),
    jo = @intFromEnum(Alpha3Code.jor),
    jp = @intFromEnum(Alpha3Code.jpn),
    kz = @intFromEnum(Alpha3Code.kaz),
    ke = @intFromEnum(Alpha3Code.ken),
    kg = @intFromEnum(Alpha3Code.kgz),
    kh = @intFromEnum(Alpha3Code.khm),
    ki = @intFromEnum(Alpha3Code.kir),
    kn = @intFromEnum(Alpha3Code.kna),
    kr = @intFromEnum(Alpha3Code.kor),
    kw = @intFromEnum(Alpha3Code.kwt),
    la = @intFromEnum(Alpha3Code.lao),
    lb = @intFromEnum(Alpha3Code.lbn),
    lr = @intFromEnum(Alpha3Code.lbr),
    ly = @intFromEnum(Alpha3Code.lby),
    lc = @intFromEnum(Alpha3Code.lca),
    li = @intFromEnum(Alpha3Code.lie),
    lk = @intFromEnum(Alpha3Code.lka),
    ls = @intFromEnum(Alpha3Code.lso),
    lt = @intFromEnum(Alpha3Code.ltu),
    lu = @intFromEnum(Alpha3Code.lux),
    lv = @intFromEnum(Alpha3Code.lva),
    mo = @intFromEnum(Alpha3Code.mac),
    mf = @intFromEnum(Alpha3Code.maf),
    ma = @intFromEnum(Alpha3Code.mar),
    mc = @intFromEnum(Alpha3Code.mco),
    md = @intFromEnum(Alpha3Code.mda),
    mg = @intFromEnum(Alpha3Code.mdg),
    mv = @intFromEnum(Alpha3Code.mdv),
    mx = @intFromEnum(Alpha3Code.mex),
    mh = @intFromEnum(Alpha3Code.mhl),
    mk = @intFromEnum(Alpha3Code.mkd),
    ml = @intFromEnum(Alpha3Code.mli),
    mt = @intFromEnum(Alpha3Code.mlt),
    mm = @intFromEnum(Alpha3Code.mmr),
    me = @intFromEnum(Alpha3Code.mne),
    mn = @intFromEnum(Alpha3Code.mng),
    mp = @intFromEnum(Alpha3Code.mnp),
    mz = @intFromEnum(Alpha3Code.moz),
    mr = @intFromEnum(Alpha3Code.mrt),
    ms = @intFromEnum(Alpha3Code.msr),
    mq = @intFromEnum(Alpha3Code.mtq),
    mu = @intFromEnum(Alpha3Code.mus),
    mw = @intFromEnum(Alpha3Code.mwi),
    my = @intFromEnum(Alpha3Code.mys),
    yt = @intFromEnum(Alpha3Code.myt),
    na = @intFromEnum(Alpha3Code.nam),
    nc = @intFromEnum(Alpha3Code.ncl),
    ne = @intFromEnum(Alpha3Code.ner),
    nf = @intFromEnum(Alpha3Code.nfk),
    ng = @intFromEnum(Alpha3Code.nga),
    ni = @intFromEnum(Alpha3Code.nic),
    nu = @intFromEnum(Alpha3Code.niu),
    nl = @intFromEnum(Alpha3Code.nld),
    no = @intFromEnum(Alpha3Code.nor),
    np = @intFromEnum(Alpha3Code.npl),
    nr = @intFromEnum(Alpha3Code.nru),
    nz = @intFromEnum(Alpha3Code.nzl),
    om = @intFromEnum(Alpha3Code.omn),
    pk = @intFromEnum(Alpha3Code.pak),
    pa = @intFromEnum(Alpha3Code.pan),
    pn = @intFromEnum(Alpha3Code.pcn),
    pe = @intFromEnum(Alpha3Code.per),
    ph = @intFromEnum(Alpha3Code.phl),
    pw = @intFromEnum(Alpha3Code.plw),
    pg = @intFromEnum(Alpha3Code.png),
    pl = @intFromEnum(Alpha3Code.pol),
    pr = @intFromEnum(Alpha3Code.pri),
    kp = @intFromEnum(Alpha3Code.prk),
    pt = @intFromEnum(Alpha3Code.prt),
    py = @intFromEnum(Alpha3Code.pry),
    ps = @intFromEnum(Alpha3Code.pse),
    pf = @intFromEnum(Alpha3Code.pyf),
    qa = @intFromEnum(Alpha3Code.qat),
    re = @intFromEnum(Alpha3Code.reu),
    ro = @intFromEnum(Alpha3Code.rou),
    ru = @intFromEnum(Alpha3Code.rus),
    rw = @intFromEnum(Alpha3Code.rwa),
    sa = @intFromEnum(Alpha3Code.sau),
    sd = @intFromEnum(Alpha3Code.sdn),
    sn = @intFromEnum(Alpha3Code.sen),
    sg = @intFromEnum(Alpha3Code.sgp),
    gs = @intFromEnum(Alpha3Code.sgs),
    sh = @intFromEnum(Alpha3Code.shn),
    sj = @intFromEnum(Alpha3Code.sjm),
    sb = @intFromEnum(Alpha3Code.slb),
    sl = @intFromEnum(Alpha3Code.sle),
    sv = @intFromEnum(Alpha3Code.slv),
    sm = @intFromEnum(Alpha3Code.smr),
    so = @intFromEnum(Alpha3Code.som),
    pm = @intFromEnum(Alpha3Code.spm),
    rs = @intFromEnum(Alpha3Code.srb),
    ss = @intFromEnum(Alpha3Code.ssd),
    st = @intFromEnum(Alpha3Code.stp),
    sr = @intFromEnum(Alpha3Code.sur),
    sk = @intFromEnum(Alpha3Code.svk),
    si = @intFromEnum(Alpha3Code.svn),
    se = @intFromEnum(Alpha3Code.swe),
    sz = @intFromEnum(Alpha3Code.swz),
    sx = @intFromEnum(Alpha3Code.sxm),
    sc = @intFromEnum(Alpha3Code.syc),
    sy = @intFromEnum(Alpha3Code.syr),
    tc = @intFromEnum(Alpha3Code.tca),
    td = @intFromEnum(Alpha3Code.tcd),
    tg = @intFromEnum(Alpha3Code.tgo),
    th = @intFromEnum(Alpha3Code.tha),
    tj = @intFromEnum(Alpha3Code.tjk),
    tk = @intFromEnum(Alpha3Code.tkl),
    tm = @intFromEnum(Alpha3Code.tkm),
    tl = @intFromEnum(Alpha3Code.tls),
    to = @intFromEnum(Alpha3Code.ton),
    tt = @intFromEnum(Alpha3Code.tto),
    tn = @intFromEnum(Alpha3Code.tun),
    tr = @intFromEnum(Alpha3Code.tur),
    tv = @intFromEnum(Alpha3Code.tuv),
    tw = @intFromEnum(Alpha3Code.twn),
    tz = @intFromEnum(Alpha3Code.tza),
    ug = @intFromEnum(Alpha3Code.uga),
    ua = @intFromEnum(Alpha3Code.ukr),
    um = @intFromEnum(Alpha3Code.umi),
    uy = @intFromEnum(Alpha3Code.ury),
    us = @intFromEnum(Alpha3Code.usa),
    uz = @intFromEnum(Alpha3Code.uzb),
    va = @intFromEnum(Alpha3Code.vat),
    vc = @intFromEnum(Alpha3Code.vct),
    ve = @intFromEnum(Alpha3Code.ven),
    vg = @intFromEnum(Alpha3Code.vgb),
    vi = @intFromEnum(Alpha3Code.vir),
    vn = @intFromEnum(Alpha3Code.vnm),
    vu = @intFromEnum(Alpha3Code.vut),
    wf = @intFromEnum(Alpha3Code.wlf),
    ws = @intFromEnum(Alpha3Code.wsm),
    ye = @intFromEnum(Alpha3Code.yem),
    za = @intFromEnum(Alpha3Code.zaf),
    zm = @intFromEnum(Alpha3Code.zmb),
    zw = @intFromEnum(Alpha3Code.zwe),
};

test "Everything" {
    const code = Self.init(.pol);
    try std.testing.expectEqual(code.code, Alpha3Code.pol);
    try std.testing.expectEqualStrings("PL", code.code.alpha2CodeString()[0..]);
    try std.testing.expectEqualStrings("POL", code.code.alpha3CodeString()[0..]);
    try std.testing.expectEqualStrings("Poland", code.code.nameShortAscii()[0..]);
    try std.testing.expectEqualStrings("Poland", code.code.nameShortUtf8()[0..]);
    try std.testing.expectEqual(616, code.code.numericInteger());
}
